#!/usr/lib/qvd/bin/perl

BEGIN {
    # close file handles from parent in order to workaround some
    # interaction between lxc and certain terminal emulators
    # (i.e. mrxvt)
    my $this = fileno(DATA);
    for (2..1000) { open my $fh, ">&=$_" and close $fh unless $_ == $this }

    # VMA monitor will use the proxy if http_proxy is defined.
    delete $ENV{http_proxy};
}

use strict;
use warnings;

use Getopt::Long;
my ($config_file, $foreground);
BEGIN {
    # we parse command line arguments before loading QVD::Config::Core
    # in order to allow for changing the configuration file name
    $config_file = '/etc/qvd/node.conf';
    $foreground = 0;
    GetOptions("config-file|f=s" => \$config_file,
               "X"               => \$foreground);
    @QVD::Config::Core::FILES = $config_file;
}


use QVD::Log;   ## this needs to go before App::Daemon, so we get to initialize l4p
use QVD::Config::Core;
use App::Daemon qw/daemonize/;

# FIXME: just for debugging!
# $SIG{'INT'} = sub { die };

my $umask = core_cfg('hkd.user.umask');  ## BUG: should use 'cfg' instead of 'core_cfg'
$umask =~ /^[0-7]+$/ or die "invalid umask $umask\n";

my $path_run = core_cfg('path.run');
mkdir $path_run, 0755;

unless (-d $path_run) {
    die "Unable to create directory $path_run\n";
    exit (1);
}

$App::Daemon::pidfile = core_cfg('hkd.pid_file');
$App::Daemon::as_user = core_cfg('hkd.as_user');
$App::Daemon::as_group = core_cfg('hkd.as_group');
$App::Daemon::background = 0 if $foreground;

## require the module before daemonizingâ€”otherwise syntax errors end up nowhere since STDERR is closed
require QVD::HKD;
daemonize;
umask oct $umask;

my $ok = eval {
    my $hkd = QVD::HKD->new(config_file => $config_file);
    $hkd->run;
    undef $hkd;
    1;
};

$ok or LOGDIE "Exception: $@";

