#!/usr/lib/qvd/bin/perl

use strict;
use warnings;
use File::Spec;

our ($user_dir, $user_config_filename);

BEGIN {
    $user_dir = File::Spec->rel2abs(File::Spec->join((getpwuid $>)[7] // $ENV{HOME}, '.qvd'));
    mkdir($user_dir);

    $ENV{NX_CLIENT} = 'false';

    $user_config_filename = File::Spec->join($user_dir, 'client.conf');

    if (exists($ENV{QVDCLIENTCONFIG})) {
        my $configfile = $ENV{QVDCLIENTCONFIG};
        if (-f $configfile) {
            $user_config_filename = $configfile;
        } else {
            print STDERR "Ignoring config file defined in QVDCLIENTCONFIG env variable <$configfile> defaulting to <$user_config_filename>\n";
        }
    }
    #no warnings;
    $QVD::Config::USE_DB = 0;
    @QVD::Config::Core::FILES = ( '/etc/qvd/client.conf',
                                  $user_config_filename );
}

use QVD::Config::Core qw(set_core_cfg core_cfg);

BEGIN {
    set_core_cfg('client.log.filename', File::Spec->join($user_dir, 'qvd-client.log'))
        unless defined core_cfg('client.log.filename', 0);
    $QVD::Log::DAEMON_NAME = 'client';
}

use QVD::Log;
use QVD::Client::SlaveClient;
use FindBin qw($Bin);

my $file = shift;

my $success = eval {
    my $client = QVD::Client::SlaveClient->new();
    $client->handle_open($file);
    1;
};
if (!$success) {
    ERROR($@) if $@;
    @ARGV = ('--file', $file);
    local $@;
    unless (defined do "$Bin/qvd-client.pl") {
        if ($@) {
            ERROR("Error running qvd-client: $@");
        } elsif ($!) {
            ERROR("Error running qvd-client: $^E");
        }
    }
}
